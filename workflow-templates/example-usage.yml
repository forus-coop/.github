name: CI/CD Pipeline

# This is an example of how to use the reusable workflows in your repository
# When creating a new repository with a CI/CD pipeline, copy this file to .github/workflows/ci-cd.yml

on:
  push:
    branches:
      - main
      - master
  pull_request:
    types: [closed]
    branches:
      - main
      - master
  release:
    types: [prereleased, released]
  workflow_dispatch:
    inputs:
      ref:
        description: 'Commit SHA, Branch or Tag to deploy'
        required: false
        default: ''
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - sandbox
          - staging
          - production
      namespace:
        description: 'Kubernetes namespace (defaults to environment name)'
        required: false
      release_type:
        description: 'Type of release (auto, major, minor, patch)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - major
          - minor
          - patch

jobs:
  determine-environment:
    runs-on: 
      group: sandbox
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      ref: ${{ steps.set-ref.outputs.ref }}
      prerelease: ${{ steps.set-env.outputs.prerelease }}
    steps:
      - name: Set environment based on event
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            
            # Set prerelease flag based on environment
            if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
              echo "prerelease=false" >> $GITHUB_OUTPUT
            else
              echo "prerelease=true" >> $GITHUB_OUTPUT
            fi
            
          elif [[ "${{ github.event_name }}" == "release" && "${{ github.event.action }}" == "released" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" && "${{ github.event.action }}" == "prereleased" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "environment=sandbox" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=sandbox" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "environment=skip" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Set reference (SHA, branch, tag)
        id: set-ref
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.ref }}" != "" ]]; then
            echo "ref=${{ github.event.inputs.ref }}" >> $GITHUB_OUTPUT
          else
            echo "ref=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  # Create or update semantic version for all deployments
  create-version:
    needs: determine-environment
    if: needs.determine-environment.outputs.environment != 'skip'
    uses: forus-coop/.github/.github/workflows/semver-release.yml@main
    with:
      release_type: ${{ github.event.inputs.release_type || 'auto' }}
      prerelease: ${{ needs.determine-environment.outputs.prerelease }}
      release_branch: ${{ github.ref_name }}
      runner_group: ${{ needs.determine-environment.outputs.environment }}
    secrets: inherit

  test:
    needs: determine-environment
    if: needs.determine-environment.outputs.environment != 'skip'
    uses: forus-coop/.github/.github/workflows/rspec-test.yml@main
    with:
      # Specify Ruby version if needed
      ruby_version: "3.2.2"
      # Optional: Exclude slower or problematic tests
      exclude_files: "spec/features/**/*,spec/slow/**/*"
      # Optional: Only run specific tags
      rspec_tags: "~slow,~js"
      # Optional: Run tests on specific paths
      rspec_paths: "spec/models,spec/controllers"
      # Enable database if needed
      postgres_enabled: true
      # Enable Redis if needed
      redis_enabled: true
      # Use the same runner group as other jobs
      runner_group: ${{ needs.determine-environment.outputs.environment }}
    secrets:
      # Optional: Custom database URL
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      # Optional: Custom Redis URL
      REDIS_URL: ${{ secrets.TEST_REDIS_URL }}
      inherit: true

  build:
    needs: [determine-environment, test, create-version]
    if: needs.determine-environment.outputs.environment != 'skip'
    uses: forus-coop/.github/.github/workflows/docker-build-push.yml@main
    with:
      # Always use the semantic version tag for consistent versioning
      image_tag: ${{ needs.create-version.outputs.version_tag }}
      runner_group: ${{ needs.determine-environment.outputs.environment }}
    secrets:
      # For Ruby applications using GitHub Packages, uncomment this line
      # SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
      inherit: true

  deploy:
    needs: [determine-environment, build, create-version]
    if: needs.determine-environment.outputs.environment != 'skip'
    uses: forus-coop/.github/.github/workflows/helm-deploy.yml@main
    with:
      environment: ${{ needs.determine-environment.outputs.environment }}
      namespace: ${{ github.event.inputs.namespace || needs.determine-environment.outputs.environment }}
      # Always use the semantic version tag for consistent versioning
      image_tag: ${{ needs.create-version.outputs.version_tag }}
    secrets: inherit

# Custom configuration options:
# 
# To use a custom Dockerfile path:
# uses: forus-coop/.github/.github/workflows/docker-build-push.yml@main
# with:
#   docker_build_dir: './app'
#   dockerfile_path: 'Dockerfile.prod'
#   image_tag: ${{ github.sha }}
#   runner_group: sandbox
# secrets:
#   SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }} # For Ruby applications
#   inherit: true
#
# To use a custom Helm chart:
# uses: forus-coop/.github/.github/workflows/helm-deploy.yml@main
# with:
#   environment: production
#   helm_chart: 'oci://ghcr.io/myorg/mychart'
#   helm_values_file: './helm/custom/${{ needs.determine-environment.outputs.environment }}.yaml' 
#
# To customize RSpec tests:
# uses: forus-coop/.github/.github/workflows/rspec-test.yml@main
# with:
#   # Run only specific tests
#   rspec_paths: "spec/models/user_spec.rb,spec/controllers/users_controller_spec.rb"
#   # Exclude system tests
#   exclude_files: "spec/system/**/*"
#   # Run only tests with specific tags
#   rspec_tags: "api,~slow"
#   # Enable PostgreSQL for tests
#   postgres_enabled: true 