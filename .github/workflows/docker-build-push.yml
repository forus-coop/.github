name: Docker Build and Push

on:
  workflow_call:
    inputs:
      docker_build_dir:
        description: "Directory containing the Dockerfile and build context"
        required: false
        type: string
        default: "."
      dockerfile_path:
        description: "Path to the Dockerfile relative to the docker_build_dir"
        required: false
        type: string
        default: "Dockerfile"
      image_tag:
        description: "Tag for the Docker image"
        required: false
        type: string
        default: ${{ github.sha }}
      ecr_repository:
        description: "Name of the ECR repository"
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      aws_region:
        description: "AWS region for ECR"
        required: false
        type: string
        default: "us-west-2"
      runner_group:
        description: "Runner group to use for building Docker images"
        required: false
        type: string
        default: "sandbox"
    secrets:
      SECRET_KEY_BASE:
        required: false
    outputs:
      image_uri:
        description: "Full URI of the pushed image"
        value: ${{ jobs.build-push.outputs.image_uri }}

jobs:
  build-push:
    runs-on:
      group: ${{ inputs.runner_group }}
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          # Note: You'll need to set these as secrets or use OIDC
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # Or use role-to-assume with OIDC
          # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image to Amazon ECR
        id: build-image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE || 'dummy-key-for-build' }}
        run: |
          # Create secrets files
          echo "$GITHUB_TOKEN" > /tmp/github_token
          echo "$SECRET_KEY_BASE" > /tmp/secret_key_base

          # Build and push using buildx with secrets
          docker buildx build \
            --secret id=BUNDLE_RUBYGEMS__PKG__GITHUB__COM,src=/tmp/github_token \
            --secret id=SECRET_KEY_BASE,src=/tmp/secret_key_base \
            --push \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            ${{ inputs.docker_build_dir }} \
            -f ${{ inputs.docker_build_dir }}/${{ inputs.dockerfile_path }}

          # Clean up secret files
          rm -f /tmp/github_token /tmp/secret_key_base

          # Set output for next jobs
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Image $IMAGE_TAG pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
