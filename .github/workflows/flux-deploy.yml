name: Flux Deploy
permissions:
  deployments: write
on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to (sandbox, staging, production)"
        required: true
        type: string
      app_name:
        description: "Name of the app to deploy"
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      namespace:
        description: "Kubernetes namespace to deploy to"
        required: false
        type: string
        default: ${{ inputs.environment }}
      image_tag:
        description: "Tag of the Docker image to deploy"
        required: true
        type: string
      image_repository:
        description: "Repository of the Docker image to deploy"
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      aws_region:
        description: "AWS region"
        required: false
        type: string
        default: "us-west-2"

jobs:
  deploy:
    runs-on:
      group: ${{ inputs.environment }}
    steps:
      
      - name: Format app name (repository name)
        id: format-app-name
        run: |
          # Replace underscores and other non-hyphen characters with hyphens
          ORIGINAL_REPO="${{ github.event.repository.name }}"
          FORMATTED_APP=$(echo "$ORIGINAL_REPO" | tr '_' '-' | tr '[:upper:]' '[:lower:]')
          echo "formatted_app=$FORMATTED_APP" >> $GITHUB_OUTPUT
          echo "Original repository name: $ORIGINAL_REPO, Formatted app name: $FORMATTED_APP"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          # Note: You'll need to set these as secrets or use OIDC
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # Or use role-to-assume with OIDC
          # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Set Kubeconfig for environment
        run: |
          mkdir -p ~/.kube

          if [[ "${{ inputs.environment }}" == "sandbox" ]]; then
            if [[ -z "${{ secrets.ORG_KUBECTL_CONFIG_BASE64_SANDBOX }}" ]]; then
              echo "Error: No kubeconfig found for sandbox environment"
              exit 1
            fi
            echo "${{ secrets.ORG_KUBECTL_CONFIG_BASE64_SANDBOX }}" | base64 --decode > ~/.kube/config
          elif [[ "${{ inputs.environment }}" == "staging" ]]; then
            if [[ -z "${{ secrets.ORG_KUBECTL_CONFIG_BASE64_STAGING }}" ]]; then
              echo "Error: No kubeconfig found for staging environment"
              exit 1
            fi
            echo "${{ secrets.ORG_KUBECTL_CONFIG_BASE64_STAGING }}" | base64 --decode > ~/.kube/config
          elif [[ "${{ inputs.environment }}" == "production" ]]; then
            if [[ -z "${{ secrets.ORG_KUBECTL_CONFIG_BASE64_PRODUCTION }}" ]]; then
              echo "Error: No kubeconfig found for production environment"
              exit 1
            fi
            echo "${{ secrets.ORG_KUBECTL_CONFIG_BASE64_PRODUCTION }}" | base64 --decode > ~/.kube/config
          else
            echo "Error: Unknown environment: ${{ inputs.environment }}"
            exit 1
          fi

          chmod 600 ~/.kube/config
          echo "Kubeconfig has been set up for ${{ inputs.environment }} environment"
      - name: Install GH
        id: install-gh
        run: |
          type -p yum-config-manager >/dev/null || sudo yum install yum-utils
          sudo yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          sudo yum install gh -y
          
      - name: Create Deployment
        id: create-deployment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DEPLOYMENT_ID=$(gh api /repos/forus-coop/${{ github.event.repository.name }}/deployments \
            -X POST \
            -f ref=${{ inputs.image_tag }} \
            -f environment=${{ inputs.environment }} \
            -f description="Deploying commit ${{ inputs.image_tag }} to ${{ inputs.environment }}" \
            -f required_contexts\[\] \
            --jq '.id')
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.30.5"
        id: install

      - name: Deploy with Flux
        run: |
          # Explicitly set KUBECONFIG environment variable
          export KUBECONFIG=~/.kube/config

          kubectl create configmap ${{ steps.format-app-name.outputs.formatted_app }}-version -n flux-system \
            --from-literal=app_version=${{ inputs.image_tag }} \
            --from-literal=deployment_id=${{ steps.create-deployment.outputs.deployment_id }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Mark deployment as successful
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api /repos/forus-coop/${{ github.event.repository.name }}/deployments/${{ steps.create-deployment.outputs.deployment_id }}/statuses \
            -X POST \
            -f state=success \
            -f log_url=https://github.com/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}
